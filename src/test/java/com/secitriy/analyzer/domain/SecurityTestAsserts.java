package com.secitriy.analyzer.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SecurityTestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecurityTestAllPropertiesEquals(SecurityTest expected, SecurityTest actual) {
        assertSecurityTestAutoGeneratedPropertiesEquals(expected, actual);
        assertSecurityTestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecurityTestAllUpdatablePropertiesEquals(SecurityTest expected, SecurityTest actual) {
        assertSecurityTestUpdatableFieldsEquals(expected, actual);
        assertSecurityTestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecurityTestAutoGeneratedPropertiesEquals(SecurityTest expected, SecurityTest actual) {
        assertThat(expected)
            .as("Verify SecurityTest auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecurityTestUpdatableFieldsEquals(SecurityTest expected, SecurityTest actual) {
        assertThat(expected)
            .as("Verify SecurityTest relevant properties")
            .satisfies(e -> assertThat(e.getTestStatus()).as("check testStatus").isEqualTo(actual.getTestStatus()))
            .satisfies(e -> assertThat(e.getTestScore()).as("check testScore").isEqualTo(actual.getTestScore()))
            .satisfies(e -> assertThat(e.getSecurityLevel()).as("check securityLevel").isEqualTo(actual.getSecurityLevel()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSecurityTestUpdatableRelationshipsEquals(SecurityTest expected, SecurityTest actual) {
        assertThat(expected)
            .as("Verify SecurityTest relationships")
            .satisfies(e -> assertThat(e.getApplicationUser()).as("check applicationUser").isEqualTo(actual.getApplicationUser()));
    }
}
